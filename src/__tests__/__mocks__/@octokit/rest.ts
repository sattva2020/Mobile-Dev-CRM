export const Octokit = jest.fn().mockImplementation(() => ({
  rest: {
    issues: {
      create: jest.fn().mockResolvedValue({
        data: {
          id: 1,
          number: 1,
          title: 'Test Issue',
          body: 'Test Body',
          state: 'open',
          created_at: '2024-01-17T12:00:00Z',
          updated_at: '2024-01-17T12:00:00Z',
          user: {
            login: 'testuser',
            avatar_url: 'https://github.com/images/error/testuser_happy.gif',
          },
          labels: [],
          assignees: [],
          milestone: null,
          comments: 0,
          html_url: 'https://github.com/test/test/issues/1',
        },
      }),
      list: jest.fn().mockResolvedValue({
        data: [
          {
            id: 1,
            number: 1,
            title: 'Test Issue',
            body: 'Test Body',
            state: 'open',
            created_at: '2024-01-17T12:00:00Z',
            updated_at: '2024-01-17T12:00:00Z',
            user: {
              login: 'testuser',
              avatar_url: 'https://github.com/images/error/testuser_happy.gif',
            },
            labels: [],
            assignees: [],
            milestone: null,
            comments: 0,
            html_url: 'https://github.com/test/test/issues/1',
          },
        ],
      }),
      get: jest.fn().mockResolvedValue({
        data: {
          id: 1,
          number: 1,
          title: 'Test Issue',
          body: 'Test Body',
          state: 'open',
          created_at: '2024-01-17T12:00:00Z',
          updated_at: '2024-01-17T12:00:00Z',
          user: {
            login: 'testuser',
            avatar_url: 'https://github.com/images/error/testuser_happy.gif',
          },
          labels: [],
          assignees: [],
          milestone: null,
          comments: 0,
          html_url: 'https://github.com/test/test/issues/1',
        },
      }),
      update: jest.fn().mockResolvedValue({
        data: {
          id: 1,
          number: 1,
          title: 'Updated Test Issue',
          body: 'Updated Test Body',
          state: 'closed',
          created_at: '2024-01-17T12:00:00Z',
          updated_at: '2024-01-17T12:30:00Z',
          user: {
            login: 'testuser',
            avatar_url: 'https://github.com/images/error/testuser_happy.gif',
          },
          labels: [],
          assignees: [],
          milestone: null,
          comments: 0,
          html_url: 'https://github.com/test/test/issues/1',
        },
      }),
    },
    repos: {
      get: jest.fn().mockResolvedValue({
        data: {
          id: 1,
          name: 'test-repo',
          full_name: 'testuser/test-repo',
          private: false,
          html_url: 'https://github.com/testuser/test-repo',
          description: 'Test repository',
          fork: false,
          created_at: '2024-01-17T12:00:00Z',
          updated_at: '2024-01-17T12:00:00Z',
          pushed_at: '2024-01-17T12:00:00Z',
          clone_url: 'https://github.com/testuser/test-repo.git',
          ssh_url: 'git@github.com:testuser/test-repo.git',
          size: 0,
          stargazers_count: 0,
          watchers_count: 0,
          language: 'TypeScript',
          has_issues: true,
          has_projects: true,
          has_wiki: true,
          has_pages: false,
          forks_count: 0,
          open_issues_count: 1,
          forks: 0,
          open_issues: 1,
          watchers: 0,
          default_branch: 'main',
        },
      }),
      listForUser: jest.fn().mockResolvedValue({
        data: [
          {
            id: 1,
            name: 'test-repo',
            full_name: 'testuser/test-repo',
            private: false,
            html_url: 'https://github.com/testuser/test-repo',
            description: 'Test repository',
            fork: false,
            created_at: '2024-01-17T12:00:00Z',
            updated_at: '2024-01-17T12:00:00Z',
            pushed_at: '2024-01-17T12:00:00Z',
            clone_url: 'https://github.com/testuser/test-repo.git',
            ssh_url: 'git@github.com:testuser/test-repo.git',
            size: 0,
            stargazers_count: 0,
            watchers_count: 0,
            language: 'TypeScript',
            has_issues: true,
            has_projects: true,
            has_wiki: true,
            has_pages: false,
            forks_count: 0,
            open_issues_count: 1,
            forks: 0,
            open_issues: 1,
            watchers: 0,
            default_branch: 'main',
          },
        ],
      }),
    },
    users: {
      getAuthenticated: jest.fn().mockResolvedValue({
        data: {
          login: 'testuser',
          id: 1,
          avatar_url: 'https://github.com/images/error/testuser_happy.gif',
          gravatar_id: '',
          url: 'https://api.github.com/users/testuser',
          html_url: 'https://github.com/testuser',
          type: 'User',
          site_admin: false,
          name: 'Test User',
          company: 'Test Company',
          blog: 'https://testuser.dev',
          location: 'Test City',
          email: 'test@example.com',
          hireable: true,
          bio: 'Test bio',
          twitter_username: 'testuser',
          public_repos: 10,
          public_gists: 5,
          followers: 100,
          following: 50,
          created_at: '2024-01-01T00:00:00Z',
          updated_at: '2024-01-17T12:00:00Z',
        },
      }),
    },
  },
  auth: jest.fn().mockResolvedValue({
    type: 'token',
    token: 'test-token',
  }),
}));

export default Octokit;
