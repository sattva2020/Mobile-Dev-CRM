#!/bin/bash

# üé≠ Playwright CRM Tests Runner
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ Playwright –¥–ª—è CRM —Å–∏—Å—Ç–µ–º—ã

echo "üé≠ Starting Playwright CRM Tests"
echo "================================="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Playwright
if ! command -v npx &> /dev/null; then
    echo "‚ùå npx not found. Please install Node.js and npm."
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Playwright
if ! npx playwright --version &> /dev/null; then
    echo "üì¶ Installing Playwright..."
    npm install -D @playwright/test
    npx playwright install
fi

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
mkdir -p playwright-report
mkdir -p test-results

echo "üîß Configuration:"
echo "   - Test Directory: ./tests"
echo "   - Config File: playwright-crm.config.ts"
echo "   - Base URL: http://localhost:3000"
echo ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
run_tests() {
    local test_type=$1
    local description=$2
    
    echo "üöÄ Running $description..."
    echo "----------------------------------------"
    
    case $test_type in
        "all")
            npx playwright test --config=playwright-crm.config.ts
            ;;
        "ui")
            npx playwright test --config=playwright-crm.config.ts --ui
            ;;
        "headed")
            npx playwright test --config=playwright-crm.config.ts --headed
            ;;
        "debug")
            npx playwright test --config=playwright-crm.config.ts --debug
            ;;
        "chrome")
            npx playwright test --config=playwright-crm.config.ts --project=chromium
            ;;
        "firefox")
            npx playwright test --config=playwright-crm.config.ts --project=firefox
            ;;
        "safari")
            npx playwright test --config=playwright-crm.config.ts --project=webkit
            ;;
        "mobile")
            npx playwright test --config=playwright-crm.config.ts --project="Mobile Chrome"
            ;;
        "crm")
            npx playwright test --config=playwright-crm.config.ts tests/playwright-crm-examples.spec.ts
            ;;
        "api")
            npx playwright test --config=playwright-crm.config.ts tests/api-only.spec.ts
            ;;
        *)
            echo "‚ùå Unknown test type: $test_type"
            show_help
            exit 1
            ;;
    esac
    
    local exit_code=$?
    if [ $exit_code -eq 0 ]; then
        echo "‚úÖ $description completed successfully"
    else
        echo "‚ùå $description failed with exit code $exit_code"
    fi
    
    return $exit_code
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  all       Run all tests (default)"
    echo "  ui        Run tests in UI mode"
    echo "  headed    Run tests in headed mode"
    echo "  debug     Run tests in debug mode"
    echo "  chrome    Run tests only in Chrome"
    echo "  firefox   Run tests only in Firefox"
    echo "  safari    Run tests only in Safari"
    echo "  mobile    Run tests on mobile devices"
    echo "  crm       Run CRM-specific tests"
    echo "  api       Run API-only tests"
    echo "  help      Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0                # Run all tests"
    echo "  $0 ui            # Run tests in UI mode"
    echo "  $0 crm           # Run CRM tests only"
    echo "  $0 mobile        # Run mobile tests"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
generate_report() {
    echo ""
    echo "üìä Generating test report..."
    
    if [ -f "test-results.json" ]; then
        echo "   - JSON report: test-results.json"
    fi
    
    if [ -f "test-results.xml" ]; then
        echo "   - JUnit report: test-results.xml"
    fi
    
    if [ -d "playwright-report" ]; then
        echo "   - HTML report: playwright-report/index.html"
        echo "   - Open report: npx playwright show-report"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
cleanup() {
    echo ""
    echo "üßπ Cleaning up..."
    
    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    rm -rf test-results/temp-*
    
    echo "‚úÖ Cleanup completed"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    local test_type=${1:-"all"}
    
    case $test_type in
        "help"|"-h"|"--help")
            show_help
            exit 0
            ;;
        "all")
            run_tests "all" "All Playwright Tests"
            ;;
        "ui")
            run_tests "ui" "Playwright Tests in UI Mode"
            ;;
        "headed")
            run_tests "headed" "Playwright Tests in Headed Mode"
            ;;
        "debug")
            run_tests "debug" "Playwright Tests in Debug Mode"
            ;;
        "chrome")
            run_tests "chrome" "Chrome Tests"
            ;;
        "firefox")
            run_tests "firefox" "Firefox Tests"
            ;;
        "safari")
            run_tests "safari" "Safari Tests"
            ;;
        "mobile")
            run_tests "mobile" "Mobile Tests"
            ;;
        "crm")
            run_tests "crm" "CRM-specific Tests"
            ;;
        "api")
            run_tests "api" "API-only Tests"
            ;;
        *)
            echo "‚ùå Unknown option: $test_type"
            show_help
            exit 1
            ;;
    esac
    
    local exit_code=$?
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    generate_report
    
    # –û—á–∏—Å—Ç–∫–∞
    cleanup
    
    echo ""
    if [ $exit_code -eq 0 ]; then
        echo "üéâ All tests completed successfully!"
        echo "üìä Check the reports above for detailed results."
    else
        echo "üí• Some tests failed. Check the output above for details."
    fi
    
    exit $exit_code
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
