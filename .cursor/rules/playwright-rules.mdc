# üé≠ Playwright Rules - –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Playwright

> **–°–æ–∑–¥–∞–Ω–æ:** 2025-01-27  
> **–í–µ—Ä—Å–∏—è:** 1.0.0  
> **–ü—Ä–æ–µ–∫—Ç:** AI-Fitness Coach 360 CRM System

## üìã –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ

1. [–û–±—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã](#–æ–±—â–∏–µ-–ø—Ä–∏–Ω—Ü–∏–ø—ã)
2. [–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–æ–≤](#—Å—Ç—Ä—É–∫—Ç—É—Ä–∞-—Ç–µ—Å—Ç–æ–≤)
3. [–õ–æ–∫–∞—Ç–æ—Ä—ã –∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã](#–ª–æ–∫–∞—Ç–æ—Ä—ã-–∏-—Å–µ–ª–µ–∫—Ç–æ—Ä—ã)
4. [–û–∂–∏–¥–∞–Ω–∏—è –∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è](#–æ–∂–∏–¥–∞–Ω–∏—è-–∏-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
5. [–§–∏–∫—Å—Ç—É—Ä—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏](#—Ñ–∏–∫—Å—Ç—É—Ä—ã-–∏-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)
6. [–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è](#–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è)
7. [–û—Ç–ª–∞–¥–∫–∞ –∏ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞](#–æ—Ç–ª–∞–¥–∫–∞-–∏-—Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞)
8. [–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OnlyTests](#–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è-—Å-onlytests)
9. [CRM —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞](#crm-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ-–ø—Ä–∞–≤–∏–ª–∞)
10. [–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏](#–ª—É—á—à–∏–µ-–ø—Ä–∞–∫—Ç–∏–∫–∏)

---

## üéØ –û–±—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã

### ‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è

1. **–í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –ª–æ–∫–∞—Ç–æ—Ä—ã** - `getByRole()`, `getByLabel()`, `getByText()`
2. **–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã** - `#id`, `.class`, `[data-testid]` —Ç–æ–ª—å–∫–æ –≤ –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞—è—Ö
3. **–í—Å–µ–≥–¥–∞ –∂–¥–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤** - –∏—Å–ø–æ–ª—å–∑—É–π `toBeVisible()`, `toBeEnabled()` –≤–º–µ—Å—Ç–æ `waitForTimeout()`
4. **–ò–∑–æ–ª–∏—Ä—É–π —Ç–µ—Å—Ç—ã** - –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º
5. **–ò—Å–ø–æ–ª—å–∑—É–π TypeScript** - —Å—Ç—Ä–æ–≥–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞

### ‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω–æ

- ‚ùå **CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã** - `page.locator('#button')`
- ‚ùå **–†—É—á–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è** - `page.waitForTimeout(1000)`
- ‚ùå **–•–∞—Ä–¥–∫–æ–¥ –¥–∞–Ω–Ω—ã—Ö** - –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–∏–∫—Å—Ç—É—Ä—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
- ‚ùå **–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞** - –≤—ã–Ω–æ—Å–∏ –≤ —Ö–µ–ª–ø–µ—Ä—ã –∏ —É—Ç–∏–ª–∏—Ç—ã
- ‚ùå **–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫** - –≤—Å–µ–≥–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–π –∏—Å–∫–ª—é—á–µ–Ω–∏—è

---

## üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–æ–≤

### –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤

```
tests/
‚îú‚îÄ‚îÄ crm/                    # CRM —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã
‚îÇ   ‚îú‚îÄ‚îÄ projects.spec.ts    # –¢–µ—Å—Ç—ã –ø—Ä–æ–µ–∫—Ç–æ–≤
‚îÇ   ‚îú‚îÄ‚îÄ tasks.spec.ts       # –¢–µ—Å—Ç—ã –∑–∞–¥–∞—á
‚îÇ   ‚îú‚îÄ‚îÄ ai-integration.spec.ts # AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
‚îÇ   ‚îî‚îÄ‚îÄ users.spec.ts      # –¢–µ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚îú‚îÄ‚îÄ api/                    # API —Ç–µ—Å—Ç—ã
‚îÇ   ‚îú‚îÄ‚îÄ projects-api.spec.ts
‚îÇ   ‚îî‚îÄ‚îÄ tasks-api.spec.ts
‚îú‚îÄ‚îÄ e2e/                    # End-to-end —Ç–µ—Å—Ç—ã
‚îÇ   ‚îú‚îÄ‚îÄ user-workflows.spec.ts
‚îÇ   ‚îî‚îÄ‚îÄ admin-workflows.spec.ts
‚îú‚îÄ‚îÄ fixtures/               # –§–∏–∫—Å—Ç—É—Ä—ã
‚îÇ   ‚îú‚îÄ‚îÄ auth.ts
‚îÇ   ‚îú‚îÄ‚îÄ test-data.ts
‚îÇ   ‚îî‚îÄ‚îÄ api-mocks.ts
‚îî‚îÄ‚îÄ utils/                  # –£—Ç–∏–ª–∏—Ç—ã
    ‚îú‚îÄ‚îÄ helpers.ts
    ‚îî‚îÄ‚îÄ constants.ts
```

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞

```typescript
import { test, expect } from '@playwright/test';
import { authenticatedPage, adminPage } from '../fixtures/auth';
import { testData } from '../fixtures/test-data';

test.describe('CRM Project Management', () => {
  test.beforeEach(async ({ page }) => {
    // –û–±—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    await page.goto('/projects');
  });

  test.describe('Project Creation', () => {
    test('should create new project with AI analysis', async ({ page }) => {
      // Arrange - –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
      const projectData = testData.projects.valid;
      
      // Act - –¥–µ–π—Å—Ç–≤–∏–µ
      await page.getByRole('button', { name: 'New Project' }).click();
      await page.getByLabel('Project Name').fill(projectData.name);
      await page.getByLabel('Description').fill(projectData.description);
      await page.getByRole('button', { name: 'Analyze with AI' }).click();
      
      // Assert - –ø—Ä–æ–≤–µ—Ä–∫–∞
      await expect(page.getByText('AI Analysis Complete')).toBeVisible();
      await expect(page.getByText(projectData.name)).toBeVisible();
    });
  });
});
```

---

## üéØ –õ–æ–∫–∞—Ç–æ—Ä—ã –∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã

### ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ª–æ–∫–∞—Ç–æ—Ä—ã

```typescript
// ‚úÖ –•–æ—Ä–æ—à–æ - —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –ª–æ–∫–∞—Ç–æ—Ä—ã
await page.getByRole('button', { name: 'Save Project' }).click();
await page.getByLabel('Project Name').fill('Test Project');
await page.getByText('Project created successfully').toBeVisible();
await page.getByPlaceholder('Enter project name').fill('Test');
await page.getByTitle('Create new project').click();

// ‚úÖ –•–æ—Ä–æ—à–æ - –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ç–æ—Ä—ã
await page.getByRole('button', { name: 'Save' }).and(page.getByTestId('save-button')).click();
await page.getByText('Project').and(page.getByText('created')).toBeVisible();
```

### ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ª–æ–∫–∞—Ç–æ—Ä—ã

```typescript
// ‚ùå –ü–ª–æ—Ö–æ - CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
await page.locator('#save-button').click();
await page.locator('.project-card').click();
await page.locator('[data-testid="project-name"]').fill('Test');

// ‚ùå –ü–ª–æ—Ö–æ - XPath
await page.locator('//button[@id="save"]').click();
await page.locator('//div[contains(@class, "project")]').click();
```

### –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏

```typescript
// –¢–æ–ª—å–∫–æ –≤ –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞—è—Ö - data-testid
await page.getByTestId('complex-component').click();

// –¢–æ–ª—å–∫–æ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
await page.locator('text=Unique Text').click();

// –¢–æ–ª—å–∫–æ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
await page.locator('.loading-spinner').waitFor({ state: 'hidden' });
```

---

## ‚è≥ –û–∂–∏–¥–∞–Ω–∏—è –∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

### ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è

```typescript
// ‚úÖ –•–æ—Ä–æ—à–æ - –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è
await expect(page.getByRole('heading', { name: 'Projects' })).toBeVisible();
await expect(page.getByText('Project created')).toBeVisible();
await expect(page.getByRole('button', { name: 'Save' })).toBeEnabled();
await expect(page.getByRole('checkbox')).toBeChecked();
await expect(page.getByRole('textbox')).toHaveValue('test@example.com');

// ‚úÖ –•–æ—Ä–æ—à–æ - –æ–∂–∏–¥–∞–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
await expect(page.getByText('AI Analysis Complete')).toBeVisible({ timeout: 10000 });
await expect(page.getByRole('button')).toBeEnabled({ timeout: 5000 });
```

### ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è

```typescript
// ‚ùå –ü–ª–æ—Ö–æ - —Ä—É—á–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è
await page.waitForTimeout(1000);
await page.waitForTimeout(5000);

// ‚ùå –ü–ª–æ—Ö–æ - –æ–∂–∏–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
await page.waitForSelector('.loading');
await page.waitForSelector('#button');
```

### –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è

```typescript
// –û–∂–∏–¥–∞–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
await page.waitForResponse('**/api/projects');
await page.waitForRequest('**/api/ai/analyze');

// –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
await page.waitForURL('**/projects');
await page.waitForLoadState('networkidle');

// –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
await page.waitForEvent('console', msg => msg.text().includes('Error'));
```

---

## üîß –§–∏–∫—Å—Ç—É—Ä—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

### –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã

```typescript
// tests/fixtures/auth.ts
import { test as base } from '@playwright/test';
import { Page } from '@playwright/test';

type AuthFixtures = {
  authenticatedPage: Page;
  adminPage: Page;
  userPage: Page;
};

export const test = base.extend<AuthFixtures>({
  authenticatedPage: async ({ page }, use) => {
    await page.goto('/login');
    await page.getByLabel('Username').fill('user');
    await page.getByLabel('Password').fill('password');
    await page.getByRole('button', { name: 'Login' }).click();
    await expect(page.getByText('Welcome')).toBeVisible();
    await use(page);
  },

  adminPage: async ({ page }, use) => {
    await page.goto('/login');
    await page.getByLabel('Username').fill('admin');
    await page.getByLabel('Password').fill('admin123');
    await page.getByRole('button', { name: 'Login' }).click();
    await expect(page.getByText('Admin Dashboard')).toBeVisible();
    await use(page);
  },

  userPage: async ({ page }, use) => {
    await page.goto('/login');
    await page.getByLabel('Username').fill('testuser');
    await page.getByLabel('Password').fill('testpass');
    await page.getByRole('button', { name: 'Login' }).click();
    await expect(page.getByText('User Dashboard')).toBeVisible();
    await use(page);
  },
});
```

### –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

```typescript
// tests/fixtures/test-data.ts
export const testData = {
  projects: {
    valid: {
      name: 'Test Project',
      description: 'Test project description',
      priority: 'high',
      status: 'in-progress'
    },
    invalid: {
      name: '',
      description: 'x'.repeat(1001), // –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
      priority: 'invalid',
      status: 'invalid'
    }
  },
  tasks: {
    valid: {
      title: 'Test Task',
      description: 'Test task description',
      priority: 'medium',
      status: 'todo'
    }
  },
  users: {
    admin: {
      username: 'admin',
      password: 'admin123',
      role: 'admin'
    },
    user: {
      username: 'user',
      password: 'password',
      role: 'user'
    }
  }
};
```

---

## ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

### –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

```typescript
// playwright.config.ts
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  testDir: './tests',
  fullyParallel: true,
  forbidOnly: !!process.env.CI,
  retries: process.env.CI ? 2 : 0,
  workers: process.env.CI ? 1 : undefined,
  
  use: {
    baseURL: 'http://localhost:3000',
    trace: 'on-first-retry',
    screenshot: 'only-on-failure',
    video: 'retain-on-failure',
    actionTimeout: 10000,
    navigationTimeout: 30000,
  },

  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
    },
    {
      name: 'firefox',
      use: { ...devices['Desktop Firefox'] },
    },
    {
      name: 'webkit',
      use: { ...devices['Desktop Safari'] },
    },
    {
      name: 'Mobile Chrome',
      use: { ...devices['Pixel 5'] },
    },
    {
      name: 'Mobile Safari',
      use: { ...devices['iPhone 12'] },
    },
  ],

  webServer: {
    command: 'npm run dev',
    url: 'http://localhost:3000',
    reuseExistingServer: !process.env.CI,
    timeout: 120 * 1000,
  },
});
```

### CRM —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

```typescript
// playwright-crm.config.ts
export default defineConfig({
  testDir: './tests',
  testMatch: [
    '**/crm/**/*.spec.ts',
    '**/api/**/*.spec.ts',
    '**/e2e/**/*.spec.ts'
  ],
  
  use: {
    baseURL: 'http://localhost:3000',
    trace: 'on-first-retry',
    screenshot: 'only-on-failure',
    video: 'retain-on-failure',
  },

  projects: [
    {
      name: 'CRM Desktop',
      testMatch: '**/crm/**/*.spec.ts',
      use: { ...devices['Desktop Chrome'] },
    },
    {
      name: 'CRM Mobile',
      testMatch: '**/crm/**/*.spec.ts',
      use: { ...devices['Pixel 5'] },
    },
    {
      name: 'API Tests',
      testMatch: '**/api/**/*.spec.ts',
      use: { ...devices['Desktop Chrome'] },
    },
  ],

  globalSetup: require.resolve('./tests/global-setup.ts'),
  globalTeardown: require.resolve('./tests/global-teardown.ts'),
});
```

---

## üîç –û—Ç–ª–∞–¥–∫–∞ –∏ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞

### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–ª–∞–¥–∫–∏

```typescript
// –í–∫–ª—é—á–µ–Ω–∏–µ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
export default defineConfig({
  use: {
    trace: 'on-first-retry', // –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ
    screenshot: 'only-on-failure', // –°–∫—Ä–∏–Ω—à–æ—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    video: 'retain-on-failure', // –í–∏–¥–µ–æ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
  },
});
```

### –û—Ç–ª–∞–¥–∫–∞ —Ç–µ—Å—Ç–æ–≤

```typescript
test('debug test', async ({ page }) => {
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—á–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∞
  await page.pause();
  
  await page.goto('/projects');
  await page.getByRole('button', { name: 'New Project' }).click();
  
  // –ü–æ—à–∞–≥–æ–≤–∞—è –æ—Ç–ª–∞–¥–∫–∞
  await page.pause();
  
  await page.getByLabel('Project Name').fill('Debug Project');
  await page.getByRole('button', { name: 'Save Project' }).click();
});
```

### –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

```typescript
test('with logging', async ({ page }) => {
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–æ–ª–∏
  page.on('console', msg => console.log(`Console: ${msg.text()}`));
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  page.on('request', request => console.log(`Request: ${request.method()} ${request.url()}`));
  page.on('response', response => console.log(`Response: ${response.status()} ${response.url()}`));
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
  page.on('pageerror', error => console.log(`Page error: ${error.message}`));
  
  await page.goto('/projects');
  // ... —Ç–µ—Å—Ç
});
```

---

## üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OnlyTests

### –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ OnlyTests –ø—Ä–æ–º–ø—Ç–æ–≤

```typescript
import { onlyTestsCRMPrompts } from '../utils/onlytests-crm-prompts';

test('should use OnlyTests prompts', async ({ page }) => {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç-–∫–µ–π—Å–æ–≤
  const testCasePrompt = onlyTestsCRMPrompts.getPrompt('design', 'testCasesClassic');
  
  // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
  const testCases = await generateTestCasesFromPrompt(testCasePrompt, {
    system: 'CRM AI-Fitness Coach 360',
    module: 'Project Management',
    requirements: 'User can create, edit, and delete projects'
  });
  
  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
  for (const testCase of testCases) {
    await page.goto('/projects');
    await executeTestCase(page, testCase);
  }
});
```

### –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ —Å OnlyTests

```typescript
// tests/utils/onlytests-generator.ts
export async function generateTestCasesFromPrompt(prompt: string, context: any) {
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç-–∫–µ–π—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ OnlyTests –ø—Ä–æ–º–ø—Ç–∞
  const response = await fetch('/api/onlytests/generate', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ prompt, context })
  });
  
  return await response.json();
}
```

---

## üè¢ CRM —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞

### –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤

```typescript
test.describe('CRM Project Management', () => {
  test('should create project with AI analysis', async ({ page }) => {
    await page.goto('/projects');
    await page.getByRole('button', { name: 'New Project' }).click();
    
    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
    await page.getByLabel('Project Name').fill('AI Integration Project');
    await page.getByLabel('Description').fill('Integration of AI services');
    await page.getByRole('combobox', { name: 'Priority' }).selectOption('high');
    
    // AI –∞–Ω–∞–ª–∏–∑
    await page.getByRole('button', { name: 'Analyze with AI' }).click();
    await expect(page.getByText('AI Analysis Complete')).toBeVisible({ timeout: 10000 });
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    await page.getByRole('button', { name: 'Save Project' }).click();
    await expect(page.getByText('Project created successfully')).toBeVisible();
  });
});
```

### –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á

```typescript
test.describe('CRM Task Management', () => {
  test('should create task with AI recommendations', async ({ page }) => {
    await page.goto('/tasks');
    await page.getByRole('button', { name: 'New Task' }).click();
    
    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
    await page.getByLabel('Task Title').fill('Implement AI Model');
    await page.getByLabel('Description').fill('Train AI model for analysis');
    await page.getByRole('combobox', { name: 'Priority' }).selectOption('critical');
    
    // AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    await page.getByRole('button', { name: 'Get AI Recommendations' }).click();
    await expect(page.getByText('AI Recommendations Generated')).toBeVisible({ timeout: 15000 });
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    await page.getByRole('button', { name: 'Save Task' }).click();
    await expect(page.getByText('Task created successfully')).toBeVisible();
  });
});
```

### –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

```typescript
test.describe('AI Integration', () => {
  test('should test AI service connectivity', async ({ page }) => {
    await page.goto('/ai-settings');
    
    // –¢–µ—Å—Ç OpenRouter
    await page.getByRole('button', { name: 'Test OpenRouter Connection' }).click();
    await expect(page.getByText('OpenRouter: Connected')).toBeVisible({ timeout: 10000 });
    
    // –¢–µ—Å—Ç LM Studio
    await page.getByRole('button', { name: 'Test LM Studio Connection' }).click();
    await expect(page.getByText('LM Studio: Connected')).toBeVisible({ timeout: 10000 });
    
    // –¢–µ—Å—Ç xAI
    await page.getByRole('button', { name: 'Test xAI Connection' }).click();
    await expect(page.getByText('xAI: Connected')).toBeVisible({ timeout: 10000 });
  });
});
```

---

## üèÜ –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–æ–≤

```typescript
// ‚úÖ –•–æ—Ä–æ—à–æ - —á–µ—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
test('user can create project', async ({ page }) => {
  // Arrange - –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
  await page.goto('/projects');
  const projectData = testData.projects.valid;
  
  // Act - –¥–µ–π—Å—Ç–≤–∏–µ
  await page.getByRole('button', { name: 'New Project' }).click();
  await page.getByLabel('Project Name').fill(projectData.name);
  await page.getByRole('button', { name: 'Save Project' }).click();
  
  // Assert - –ø—Ä–æ–≤–µ—Ä–∫–∞
  await expect(page.getByText('Project created successfully')).toBeVisible();
  await expect(page.getByText(projectData.name)).toBeVisible();
});
```

### –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

```typescript
test('should handle API errors gracefully', async ({ page }) => {
  // –ú–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ API
  await page.route('**/api/projects', async route => {
    await route.fulfill({ status: 500, body: 'Internal Server Error' });
  });

  await page.goto('/projects');
  await page.getByRole('button', { name: 'New Project' }).click();
  await page.getByLabel('Project Name').fill('Test Project');
  await page.getByRole('button', { name: 'Save Project' }).click();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏
  await expect(page.getByText('Error creating project')).toBeVisible();
  await expect(page.getByText('Please try again later')).toBeVisible();
});
```

### –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

```typescript
test.beforeEach(async ({ page }) => {
  // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
  await page.route('**/*.{png,jpg,jpeg,svg,gif}', route => route.abort());
  await page.route('**/*.{woff,woff2,ttf,otf}', route => route.abort());
  await page.route('**/analytics/**', route => route.abort());
});
```

### –ú–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö

```typescript
test('should work with mocked data', async ({ page }) => {
  // –ú–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ API –æ—Ç–≤–µ—Ç–æ–≤
  await page.route('**/api/projects', async route => {
    const mockProjects = [
      { id: 1, name: 'Mock Project 1', priority: 'high' },
      { id: 2, name: 'Mock Project 2', priority: 'medium' },
    ];
    await route.fulfill({ json: mockProjects });
  });

  await page.goto('/projects');
  await expect(page.getByText('Mock Project 1')).toBeVisible();
  await expect(page.getByText('Mock Project 2')).toBeVisible();
});
```

---

## üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å

### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—á–µ—Ç–æ–≤

```typescript
// playwright.config.ts
export default defineConfig({
  reporter: [
    ['html', { outputFolder: 'playwright-report' }],
    ['json', { outputFile: 'test-results.json' }],
    ['junit', { outputFile: 'test-results.xml' }],
    ['list'],
  ],
});
```

### –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ä–µ–ø–æ—Ä—Ç–µ—Ä—ã

```typescript
// tests/reporters/crm-reporter.ts
import { Reporter, FullConfig, Suite, TestCase, TestResult } from '@playwright/test/reporter';

class CRMReporter implements Reporter {
  onBegin(config: FullConfig, suite: Suite) {
    console.log(`üöÄ Starting CRM tests: ${suite.allTests().length} tests`);
  }

  onTestEnd(test: TestCase, result: TestResult) {
    const status = result.status === 'passed' ? '‚úÖ' : '‚ùå';
    console.log(`${status} ${test.title} (${result.duration}ms)`);
  }

  onEnd(result: FullResult) {
    console.log(`üìä CRM Tests completed: ${result.status}`);
    console.log(`   Passed: ${result.passed}`);
    console.log(`   Failed: ${result.failed}`);
  }
}

export default CRMReporter;
```

---

## üéØ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

### –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã

1. **–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –ª–æ–∫–∞—Ç–æ—Ä—ã** - –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π `getByRole()`, `getByLabel()`, `getByText()`
2. **–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è** - –∏—Å–ø–æ–ª—å–∑—É–π `toBeVisible()`, `toBeEnabled()` –≤–º–µ—Å—Ç–æ `waitForTimeout()`
3. **–ò–∑–æ–ª—è—Ü–∏—è —Ç–µ—Å—Ç–æ–≤** - –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º
4. **–¢–∏–ø–∏–∑–∞—Ü–∏—è** - –∏—Å–ø–æ–ª—å–∑—É–π TypeScript –¥–ª—è —Å—Ç—Ä–æ–≥–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
5. **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OnlyTests** - –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤

### –§–æ—Ä–º—É–ª–∞ —É—Å–ø–µ—Ö–∞

**Playwright + OnlyTests + CRM = –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!**

---

*–°–æ–∑–¥–∞–Ω–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "AI-Fitness Coach 360" —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π OnlyTests –∏ Playwright.*