#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç CRM API —Å –ø–æ–º–æ—â—å—é HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ CRM-—Å–∏—Å—Ç–µ–º—ã
 */

const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BASE_URL = 'http://localhost:3000';
const API_ENDPOINTS = {
  projects: '/projects',
  tasks: '/tasks',
  requirements: '/requirements',
  notifications: '/notifications',
};

async function testCRMAPIs() {
  console.log('üß™ –¢–µ—Å—Ç CRM API');
  console.log('='.repeat(50));
  console.log(`üîó Base URL: ${BASE_URL}`);
  console.log('='.repeat(50));

  let allTestsPassed = true;

  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    console.log('\nüì° –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API');
    console.log('-'.repeat(30));

    const healthCheck = await axios.get(BASE_URL);
    console.log('‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log(`üìä –í–µ—Ä—Å–∏—è: ${healthCheck.data.info?.version || 'Unknown'}`);

    // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
    console.log('\nüìÅ –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤');
    console.log('-'.repeat(30));

    const projectsResponse = await axios.get(`${BASE_URL}${API_ENDPOINTS.projects}`);
    console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã: ${projectsResponse.data.length} –∑–∞–ø–∏—Å–µ–π`);

    if (projectsResponse.data.length > 0) {
      console.log(`üìã –ü–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç: ${projectsResponse.data[0].name}`);
    }

    // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á
    console.log('\nüìã –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á');
    console.log('-'.repeat(30));

    const tasksResponse = await axios.get(`${BASE_URL}${API_ENDPOINTS.tasks}`);
    console.log(`‚úÖ –ó–∞–¥–∞—á–∏ –ø–æ–ª—É—á–µ–Ω—ã: ${tasksResponse.data.length} –∑–∞–ø–∏—Å–µ–π`);

    if (tasksResponse.data.length > 0) {
      console.log(`üìã –ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞: ${tasksResponse.data[0].title}`);
    }

    // –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    console.log('\nüìù –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π');
    console.log('-'.repeat(30));

    const requirementsResponse = await axios.get(`${BASE_URL}${API_ENDPOINTS.requirements}`);
    console.log(`‚úÖ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã: ${requirementsResponse.data.length} –∑–∞–ø–∏—Å–µ–π`);

    if (requirementsResponse.data.length > 0) {
      console.log(`üìã –ü–µ—Ä–≤–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ: ${requirementsResponse.data[0].title}`);
    }

    // –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    console.log('\nüîî –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    console.log('-'.repeat(30));

    const notificationsResponse = await axios.get(`${BASE_URL}${API_ENDPOINTS.notifications}`);
    console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã: ${notificationsResponse.data.length} –∑–∞–ø–∏—Å–µ–π`);

    if (notificationsResponse.data.length > 0) {
      console.log(`üìã –ü–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${notificationsResponse.data[0].title}`);
    }

    // –¢–µ—Å—Ç 6: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    console.log('\n‚ûï –¢–µ—Å—Ç 6: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞');
    console.log('-'.repeat(30));

    const newProject = {
      name: 'Test Project - CRM API Test',
      description: '–ü—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CRM API',
      status: 'active',
    };

    const createProjectResponse = await axios.post(
      `${BASE_URL}${API_ENDPOINTS.projects}`,
      newProject
    );
    console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω');
    console.log(`üÜî ID –ø—Ä–æ–µ–∫—Ç–∞: ${createProjectResponse.data.id}`);

    // –¢–µ—Å—Ç 7: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    console.log('\n‚ûï –¢–µ—Å—Ç 7: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏');
    console.log('-'.repeat(30));

    const newTask = {
      title: 'Test Task - CRM API Test',
      description: '–ó–∞–¥–∞—á–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CRM API',
      status: 'todo',
      priority: 'medium',
      category: 'testing',
      assignee: 'Test User',
      labels: ['test', 'api'],
      estimated_hours: 2,
      project_id: createProjectResponse.data.id,
    };

    const createTaskResponse = await axios.post(`${BASE_URL}${API_ENDPOINTS.tasks}`, newTask);
    console.log('‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞');
    console.log(`üÜî ID –∑–∞–¥–∞—á–∏: ${createTaskResponse.data.id}`);

    // –¢–µ—Å—Ç 8: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    console.log('\n‚ûï –¢–µ—Å—Ç 8: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è');
    console.log('-'.repeat(30));

    const newRequirement = {
      title: 'Test Requirement - CRM API Test',
      description: '–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CRM API',
      category: 'functional',
      priority: 'medium',
      status: 'draft',
      version: 1,
      project_id: createProjectResponse.data.id,
    };

    const createRequirementResponse = await axios.post(
      `${BASE_URL}${API_ENDPOINTS.requirements}`,
      newRequirement
    );
    console.log('‚úÖ –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ');
    console.log(`üÜî ID —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è: ${createRequirementResponse.data.id}`);

    // –¢–µ—Å—Ç 9: –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    console.log('\n‚ûï –¢–µ—Å—Ç 9: –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
    console.log('-'.repeat(30));

    const newNotification = {
      title: 'Test Notification - CRM API Test',
      message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CRM API',
      type: 'info',
      read: false,
      source: 'test',
      project_id: createProjectResponse.data.id,
    };

    const createNotificationResponse = await axios.post(
      `${BASE_URL}${API_ENDPOINTS.notifications}`,
      newNotification
    );
    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ');
    console.log(`üÜî ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${createNotificationResponse.data.id}`);

    // –¢–µ—Å—Ç 10: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    console.log('\n‚úèÔ∏è –¢–µ—Å—Ç 10: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏');
    console.log('-'.repeat(30));

    const taskId = createTaskResponse.data.id;
    const updateTaskData = {
      status: 'in-progress',
      progress: 50,
      actual_hours: 1,
    };

    const updateTaskResponse = await axios.patch(
      `${BASE_URL}${API_ENDPOINTS.tasks}?id=eq.${taskId}`,
      updateTaskData
    );
    console.log('‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    console.log(`üìä –°—Ç–∞—Ç—É—Å: ${updateTaskData.status}, –ü—Ä–æ–≥—Ä–µ—Å—Å: ${updateTaskData.progress}%`);

    // –¢–µ—Å—Ç 11: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á
    console.log('\nüîç –¢–µ—Å—Ç 11: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á');
    console.log('-'.repeat(30));

    const filteredTasksResponse = await axios.get(
      `${BASE_URL}${API_ENDPOINTS.tasks}?status=eq.in-progress`
    );
    console.log(`‚úÖ –ó–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ: ${filteredTasksResponse.data.length} –∑–∞–ø–∏—Å–µ–π`);

    // –¢–µ—Å—Ç 12: –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–µ–∫—Ç—É
    console.log('\nüîç –¢–µ—Å—Ç 12: –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–µ–∫—Ç—É');
    console.log('-'.repeat(30));

    const projectId = createProjectResponse.data.id;
    const projectTasksResponse = await axios.get(
      `${BASE_URL}${API_ENDPOINTS.tasks}?project_id=eq.${projectId}`
    );
    console.log(`‚úÖ –ó–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞: ${projectTasksResponse.data.length} –∑–∞–ø–∏—Å–µ–π`);

    console.log('\n' + '='.repeat(50));
    console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! CRM API —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!');
    console.log('üìä –°—Ç–∞—Ç—É—Å: ‚úÖ –ì–û–¢–û–í–û –ö –ü–†–û–î–ê–ö–®–ï–ù–£');
    console.log('üîó API: Supabase PostgREST');
    console.log('üì¶ SDK: Axios HTTP Client');
    console.log('üöÄ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏');

    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);

    if (error.response) {
      console.log('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response.data);
      console.log('–°—Ç–∞—Ç—É—Å:', error.response.status);
    }

    console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ CRM –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3000');
    console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Supabase —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    console.log('4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã');

    return false;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ CRM API...');
  console.log('üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: Supabase PostgREST API');

  const success = await testCRMAPIs();

  if (success) {
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('üöÄ CRM API –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!');
    process.exit(0);
  } else {
    console.log('\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏');
    console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CRM API');
    process.exit(1);
  }
}

main().catch(console.error);
