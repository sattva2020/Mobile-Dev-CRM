import { test, expect } from '@playwright/test';

/**
 * üé≠ Playwright CRM Examples - –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CRM —Å–∏—Å—Ç–µ–º—ã
 * –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: https://playwright.help/docs/writing-tests
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OnlyTests: https://www.onlytest.io/ru
 */

test.describe('CRM System - AI-Fitness Coach 360', () => {
  test.beforeEach(async ({ page }) => {
    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É CRM
    await page.goto('http://localhost:3000');
    
    // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await expect(page.getByRole('heading', { name: /AI-Fitness Coach 360/i })).toBeVisible();
  });

  test.describe('Project Management', () => {
    test('should create new project with AI analysis', async ({ page }) => {
      // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞
      await page.getByRole('button', { name: 'New Project' }).click();
      
      // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø—Ä–æ–µ–∫—Ç–∞
      await page.getByLabel('Project Name').fill('AI Integration Project');
      await page.getByLabel('Description').fill('Integration of AI services for fitness analysis');
      
      // –í—ã–±–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
      await page.getByRole('combobox', { name: 'Priority' }).selectOption('high');
      
      // –í—ã–±–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
      await page.getByRole('combobox', { name: 'Status' }).selectOption('in-progress');
      
      // AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
      await page.getByRole('button', { name: 'Analyze with AI' }).click();
      
      // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è AI –∞–Ω–∞–ª–∏–∑–∞
      await expect(page.getByText('AI Analysis Complete')).toBeVisible({ timeout: 10000 });
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
      await page.getByRole('button', { name: 'Save Project' }).click();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
      await expect(page.getByText('Project created successfully')).toBeVisible();
      await expect(page.getByText('AI Integration Project')).toBeVisible();
    });

    test('should edit existing project', async ({ page }) => {
      // –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
      await page.getByRole('textbox', { name: 'Search projects' }).fill('AI Integration');
      
      // –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
      await expect(page.getByText('AI Integration Project')).toBeVisible();
      
      // –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      await page.getByRole('button', { name: 'Edit' }).first().click();
      
      // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
      await page.getByLabel('Project Name').fill('Updated AI Integration Project');
      
      // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
      await page.getByLabel('Description').fill('Updated description with enhanced AI capabilities');
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      await page.getByRole('button', { name: 'Update Project' }).click();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      await expect(page.getByText('Project updated successfully')).toBeVisible();
      await expect(page.getByText('Updated AI Integration Project')).toBeVisible();
    });

    test('should delete project with confirmation', async ({ page }) => {
      // –ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      await page.getByRole('textbox', { name: 'Search projects' }).fill('AI Integration');
      
      // –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      await expect(page.getByText('AI Integration Project')).toBeVisible();
      
      // –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
      await page.getByRole('button', { name: 'Delete' }).first().click();
      
      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ
      await expect(page.getByText('Are you sure you want to delete this project?')).toBeVisible();
      await page.getByRole('button', { name: 'Confirm Delete' }).click();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
      await expect(page.getByText('Project deleted successfully')).toBeVisible();
    });
  });

  test.describe('Task Management', () => {
    test('should create task with AI recommendations', async ({ page }) => {
      // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–¥–∞—á–∞–º
      await page.getByRole('link', { name: 'Tasks' }).click();
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
      await page.getByRole('button', { name: 'New Task' }).click();
      
      // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –∑–∞–¥–∞—á–∏
      await page.getByLabel('Task Title').fill('Implement AI Model Training');
      await page.getByLabel('Description').fill('Train AI model for fitness pose recognition');
      
      // –í—ã–±–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
      await page.getByRole('combobox', { name: 'Priority' }).selectOption('critical');
      
      // –í—ã–±–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
      await page.getByRole('combobox', { name: 'Status' }).selectOption('todo');
      
      // AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      await page.getByRole('button', { name: 'Get AI Recommendations' }).click();
      
      // –û–∂–∏–¥–∞–Ω–∏–µ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
      await expect(page.getByText('AI Recommendations Generated')).toBeVisible({ timeout: 15000 });
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
      await page.getByRole('button', { name: 'Save Task' }).click();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è
      await expect(page.getByText('Task created successfully')).toBeVisible();
      await expect(page.getByText('Implement AI Model Training')).toBeVisible();
    });

    test('should update task status', async ({ page }) => {
      // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–¥–∞—á–∞–º
      await page.getByRole('link', { name: 'Tasks' }).click();
      
      // –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á–∏
      await page.getByRole('textbox', { name: 'Search tasks' }).fill('AI Model Training');
      
      // –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      await expect(page.getByText('Implement AI Model Training')).toBeVisible();
      
      // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ dropdown
      await page.getByRole('combobox', { name: 'Status' }).first().selectOption('in-progress');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
      await expect(page.getByText('Status updated successfully')).toBeVisible();
    });
  });

  test.describe('AI Integration', () => {
    test('should test AI service connectivity', async ({ page }) => {
      // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º AI
      await page.getByRole('link', { name: 'AI Settings' }).click();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ AI —Å–µ—Ä–≤–∏—Å–æ–≤
      await expect(page.getByText('AI Services Status')).toBeVisible();
      
      // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenRouter
      await page.getByRole('button', { name: 'Test OpenRouter Connection' }).click();
      await expect(page.getByText('OpenRouter: Connected')).toBeVisible({ timeout: 10000 });
      
      // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LM Studio
      await page.getByRole('button', { name: 'Test LM Studio Connection' }).click();
      await expect(page.getByText('LM Studio: Connected')).toBeVisible({ timeout: 10000 });
      
      // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ xAI
      await page.getByRole('button', { name: 'Test xAI Connection' }).click();
      await expect(page.getByText('xAI: Connected')).toBeVisible({ timeout: 10000 });
    });

    test('should perform AI analysis on project', async ({ page }) => {
      // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º
      await page.getByRole('link', { name: 'Projects' }).click();
      
      // –í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      await page.getByText('AI Integration Project').click();
      
      // –ó–∞–ø—É—Å–∫ AI –∞–Ω–∞–ª–∏–∑–∞
      await page.getByRole('button', { name: 'Run AI Analysis' }).click();
      
      // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
      await expect(page.getByText('AI Analysis in Progress')).toBeVisible();
      await expect(page.getByText('AI Analysis Complete')).toBeVisible({ timeout: 30000 });
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
      await expect(page.getByText('Analysis Results')).toBeVisible();
      await expect(page.getByText('Risk Assessment')).toBeVisible();
      await expect(page.getByText('Recommendations')).toBeVisible();
    });
  });

  test.describe('User Interface', () => {
    test('should have responsive design', async ({ page }) => {
      // –¢–µ—Å—Ç –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ
      await page.setViewportSize({ width: 375, height: 667 });
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
      await page.getByRole('button', { name: 'Menu' }).click();
      await expect(page.getByRole('navigation')).toBeVisible();
      
      // –¢–µ—Å—Ç –Ω–∞ –ø–ª–∞–Ω—à–µ—Ç–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ
      await page.setViewportSize({ width: 768, height: 1024 });
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
      await expect(page.getByRole('main')).toBeVisible();
      
      // –¢–µ—Å—Ç –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ
      await page.setViewportSize({ width: 1920, height: 1080 });
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
      await expect(page.getByRole('navigation')).toBeVisible();
      await expect(page.getByRole('main')).toBeVisible();
    });

    test('should support keyboard navigation', async ({ page }) => {
      // –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
      await page.keyboard.press('Tab');
      await page.keyboard.press('Tab');
      await page.keyboard.press('Enter');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é
      await expect(page.getByRole('dialog')).toBeVisible();
      
      // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
      await page.keyboard.press('Escape');
      await expect(page.getByRole('dialog')).not.toBeVisible();
    });
  });

  test.describe('Data Validation', () => {
    test('should validate required fields', async ({ page }) => {
      // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      await page.getByRole('button', { name: 'New Project' }).click();
      await page.getByRole('button', { name: 'Save Project' }).click();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
      await expect(page.getByText('Project name is required')).toBeVisible();
      await expect(page.getByText('Description is required')).toBeVisible();
    });

    test('should validate email format', async ({ page }) => {
      // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await page.getByRole('button', { name: 'User Settings' }).click();
      
      // –í–≤–æ–¥ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ email
      await page.getByLabel('Email').fill('invalid-email');
      await page.getByRole('button', { name: 'Save Settings' }).click();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      await expect(page.getByText('Please enter a valid email address')).toBeVisible();
    });
  });

  test.describe('Performance', () => {
    test('should load pages within acceptable time', async ({ page }) => {
      const startTime = Date.now();
      
      // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–µ–∫—Ç–æ–≤
      await page.goto('http://localhost:3000/projects');
      
      // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
      await expect(page.getByRole('heading', { name: 'Projects' })).toBeVisible();
      
      const loadTime = Date.now() - startTime;
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏ (–º–µ–Ω–µ–µ 3 —Å–µ–∫—É–Ω–¥)
      expect(loadTime).toBeLessThan(3000);
    });

    test('should handle large datasets', async ({ page }) => {
      // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º
      await page.goto('http://localhost:3000/projects');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
      await expect(page.getByRole('button', { name: 'Next Page' })).toBeVisible();
      
      // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      await page.getByRole('button', { name: 'Next Page' }).click();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
      await expect(page.getByText('Loading...')).not.toBeVisible({ timeout: 5000 });
    });
  });
});

// –•—É–∫–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
test.afterEach(async ({ page }) => {
  // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
  // await page.evaluate(() => {
  //   localStorage.clear();
  //   sessionStorage.clear();
  // });
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
test.beforeAll(async () => {
  console.log('üöÄ Starting Playwright CRM Tests');
});

test.afterAll(async () => {
  console.log('‚úÖ Playwright CRM Tests Completed');
});
