import { test, expect } from '@playwright/test';

/**
 * üé≠ Playwright Rules Demo Test
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∞–≤–∏–ª Playwright –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
 */

test.describe('Playwright Rules Demo', () => {
  test('should demonstrate semantic locators', async ({ page }) => {
    // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ - —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –ª–æ–∫–∞—Ç–æ—Ä—ã
    await page.goto('https://example.com');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º getByRole –¥–ª—è –∫–Ω–æ–ø–æ–∫
    const heading = page.getByRole('heading', { name: 'Example Domain' });
    await expect(heading).toBeVisible();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º getByText –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    const text = page.getByText('This domain is for use in illustrative examples');
    await expect(text).toBeVisible();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º getByTitle –¥–ª—è —Å—Å—ã–ª–æ–∫
    const link = page.getByRole('link', { name: 'More information...' });
    await expect(link).toBeVisible();
  });

  test('should demonstrate proper waiting', async ({ page }) => {
    await page.goto('https://example.com');
    
    // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ - –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è
    await expect(page.getByRole('heading')).toBeVisible();
    await expect(page.getByText('Example Domain')).toBeVisible();
    
    // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ - –æ–∂–∏–¥–∞–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    await expect(page.getByRole('heading')).toBeVisible({ timeout: 10000 });
  });

  test('should demonstrate form interactions', async ({ page }) => {
    await page.goto('https://httpbin.org/forms/post');
    
    // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ - —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –ª–æ–∫–∞—Ç–æ—Ä—ã –¥–ª—è —Ñ–æ—Ä–º
    await page.getByLabel('Customer name').fill('Test User');
    await page.getByLabel('Telephone').fill('123-456-7890');
    await page.getByLabel('Email address').fill('test@example.com');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
    await expect(page.getByLabel('Customer name')).toHaveValue('Test User');
    await expect(page.getByLabel('Telephone')).toHaveValue('123-456-7890');
    await expect(page.getByLabel('Email address')).toHaveValue('test@example.com');
  });

  test('should demonstrate error handling', async ({ page }) => {
    // –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    await page.goto('https://httpbin.org/status/404');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const response = await page.waitForResponse('**/status/404');
    expect(response.status()).toBe(404);
  });

  test('should demonstrate network mocking', async ({ page }) => {
    // –ú–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    await page.route('**/api/test', async route => {
      await route.fulfill({
        status: 200,
        contentType: 'application/json',
        body: JSON.stringify({ message: 'Mocked response' })
      });
    });

    await page.goto('https://httpbin.org/json');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
    await expect(page.getByText('json')).toBeVisible();
  });

  test('should demonstrate accessibility testing', async ({ page }) => {
    await page.goto('https://example.com');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º ARIA –∞—Ç—Ä–∏–±—É—Ç—ã
    const heading = page.getByRole('heading', { name: 'Example Domain' });
    await expect(heading).toBeVisible();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await page.keyboard.press('Tab');
    await page.keyboard.press('Tab');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ–∫—É—Å —Ä–∞–±–æ—Ç–∞–µ—Ç
    const focusedElement = page.locator(':focus');
    await expect(focusedElement).toBeVisible();
  });

  test('should demonstrate mobile testing', async ({ page }) => {
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
    await page.setViewportSize({ width: 375, height: 667 });
    
    await page.goto('https://example.com');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º
    await expect(page.getByRole('heading')).toBeVisible();
    await expect(page.getByText('Example Domain')).toBeVisible();
  });

  test('should demonstrate performance testing', async ({ page }) => {
    const startTime = Date.now();
    
    await page.goto('https://example.com');
    await page.waitForLoadState('networkidle');
    
    const loadTime = Date.now() - startTime;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –±—ã—Å—Ç—Ä–æ
    expect(loadTime).toBeLessThan(5000); // –ú–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
    await expect(page.getByRole('heading')).toBeVisible();
  });

  test('should demonstrate screenshot and video', async ({ page }) => {
    await page.goto('https://example.com');
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    await page.screenshot({ path: 'test-results/example-screenshot.png' });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω
    const fs = require('fs');
    expect(fs.existsSync('test-results/example-screenshot.png')).toBe(true);
  });

  test('should demonstrate console logging', async ({ page }) => {
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–æ–ª–∏
    const consoleMessages: string[] = [];
    page.on('console', msg => consoleMessages.push(msg.text()));
    
    await page.goto('https://example.com');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –±–µ–∑ –æ—à–∏–±–æ–∫
    await expect(page.getByRole('heading')).toBeVisible();
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å consoleMessages
    console.log('Console messages:', consoleMessages);
  });
});
