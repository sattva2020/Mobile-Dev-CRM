import { test, expect } from '@playwright/test';
import { authenticatedPage, adminPage } from '../fixtures/auth';
import { testData } from '../fixtures/test-data';

/**
 * üé≠ Playwright Advanced CRM Tests
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è CRM —Å–∏—Å—Ç–µ–º—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OnlyTests
 * –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞: https://playwright.help/docs/intro
 */

test.describe('CRM Advanced Features', () => {
  test.describe('Project Management', () => {
    test('should create complex project with AI analysis', async ({ page }) => {
      await page.goto('/projects');
      await page.getByRole('button', { name: 'New Project' }).click();
      
      // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      await page.getByLabel('Project Name').fill('AI Integration Project');
      await page.getByLabel('Description').fill('Complex project with AI integration and multiple tasks');
      await page.getByRole('combobox', { name: 'Priority' }).selectOption('high');
      await page.getByRole('combobox', { name: 'Status' }).selectOption('in-progress');
      
      // AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
      await page.getByRole('button', { name: 'Analyze with AI' }).click();
      await expect(page.getByText('AI Analysis Complete')).toBeVisible({ timeout: 15000 });
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
      await expect(page.getByText('AI Recommendations')).toBeVisible();
      await expect(page.getByText('Estimated Duration')).toBeVisible();
      await expect(page.getByText('Risk Assessment')).toBeVisible();
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
      await page.getByRole('button', { name: 'Save Project' }).click();
      await expect(page.getByText('Project created successfully')).toBeVisible();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ
      await expect(page.getByText('AI Integration Project')).toBeVisible();
      await expect(page.getByText('High Priority')).toBeVisible();
    });

    test('should handle project with multiple tasks', async ({ page }) => {
      // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
      await page.goto('/projects');
      await page.getByRole('button', { name: 'New Project' }).click();
      await page.getByLabel('Project Name').fill('Multi-Task Project');
      await page.getByLabel('Description').fill('Project with multiple tasks');
      await page.getByRole('button', { name: 'Save Project' }).click();
      
      // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–¥–∞—á–∞–º
      await page.getByRole('link', { name: 'Tasks' }).click();
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏
      await page.getByRole('button', { name: 'New Task' }).click();
      await page.getByLabel('Task Title').fill('Task 1: Setup');
      await page.getByLabel('Description').fill('Initial setup task');
      await page.getByRole('combobox', { name: 'Priority' }).selectOption('high');
      await page.getByRole('button', { name: 'Save Task' }).click();
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∑–∞–¥–∞—á–∏
      await page.getByRole('button', { name: 'New Task' }).click();
      await page.getByLabel('Task Title').fill('Task 2: Implementation');
      await page.getByLabel('Description').fill('Main implementation task');
      await page.getByRole('combobox', { name: 'Priority' }).selectOption('medium');
      await page.getByRole('button', { name: 'Save Task' }).click();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á
      await expect(page.getByText('Task 1: Setup')).toBeVisible();
      await expect(page.getByText('Task 2: Implementation')).toBeVisible();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ —Å –ø—Ä–æ–µ–∫—Ç–æ–º
      await page.getByRole('link', { name: 'Projects' }).click();
      await expect(page.getByText('Multi-Task Project')).toBeVisible();
      await expect(page.getByText('2 tasks')).toBeVisible();
    });

    test('should handle project deletion with confirmation', async ({ page }) => {
      // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      await page.goto('/projects');
      await page.getByRole('button', { name: 'New Project' }).click();
      await page.getByLabel('Project Name').fill('Project to Delete');
      await page.getByLabel('Description').fill('This project will be deleted');
      await page.getByRole('button', { name: 'Save Project' }).click();
      
      // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
      await page.getByRole('button', { name: 'Delete Project' }).click();
      
      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
      await expect(page.getByRole('dialog')).toBeVisible();
      await expect(page.getByText('Are you sure you want to delete this project?')).toBeVisible();
      await page.getByRole('button', { name: 'Confirm Delete' }).click();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
      await expect(page.getByText('Project deleted successfully')).toBeVisible();
      await expect(page.getByText('Project to Delete')).not.toBeVisible();
    });
  });

  test.describe('Task Management', () => {
    test('should create task with AI recommendations', async ({ page }) => {
      await page.goto('/tasks');
      await page.getByRole('button', { name: 'New Task' }).click();
      
      // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      await page.getByLabel('Task Title').fill('AI Model Training');
      await page.getByLabel('Description').fill('Train AI model for data analysis');
      await page.getByRole('combobox', { name: 'Priority' }).selectOption('critical');
      await page.getByRole('combobox', { name: 'Status' }).selectOption('todo');
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
      await page.getByRole('button', { name: 'Get AI Recommendations' }).click();
      await expect(page.getByText('AI Recommendations Generated')).toBeVisible({ timeout: 15000 });
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
      await expect(page.getByText('Recommended Duration')).toBeVisible();
      await expect(page.getByText('Skill Requirements')).toBeVisible();
      await expect(page.getByText('Risk Factors')).toBeVisible();
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
      await page.getByRole('button', { name: 'Save Task' }).click();
      await expect(page.getByText('Task created successfully')).toBeVisible();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      await expect(page.getByText('AI Model Training')).toBeVisible();
      await expect(page.getByText('Critical Priority')).toBeVisible();
    });

    test('should update task status through workflow', async ({ page }) => {
      // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
      await page.goto('/tasks');
      await page.getByRole('button', { name: 'New Task' }).click();
      await page.getByLabel('Task Title').fill('Workflow Task');
      await page.getByLabel('Description').fill('Task to test workflow');
      await page.getByRole('button', { name: 'Save Task' }).click();
      
      // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ "In Progress"
      await page.getByRole('button', { name: 'Start Task' }).click();
      await expect(page.getByText('Task started')).toBeVisible();
      await expect(page.getByText('In Progress')).toBeVisible();
      
      // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ "Review"
      await page.getByRole('button', { name: 'Mark for Review' }).click();
      await expect(page.getByText('Task marked for review')).toBeVisible();
      await expect(page.getByText('Review')).toBeVisible();
      
      // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ "Completed"
      await page.getByRole('button', { name: 'Complete Task' }).click();
      await expect(page.getByText('Task completed')).toBeVisible();
      await expect(page.getByText('Completed')).toBeVisible();
    });

    test('should handle task assignment and reassignment', async ({ page }) => {
      // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
      await page.goto('/tasks');
      await page.getByRole('button', { name: 'New Task' }).click();
      await page.getByLabel('Task Title').fill('Assignable Task');
      await page.getByLabel('Description').fill('Task for assignment testing');
      await page.getByRole('button', { name: 'Save Task' }).click();
      
      // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
      await page.getByRole('button', { name: 'Assign Task' }).click();
      await page.getByRole('combobox', { name: 'Assignee' }).selectOption('user1');
      await page.getByRole('button', { name: 'Assign' }).click();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
      await expect(page.getByText('Task assigned to user1')).toBeVisible();
      await expect(page.getByText('Assigned to: user1')).toBeVisible();
      
      // –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
      await page.getByRole('button', { name: 'Reassign Task' }).click();
      await page.getByRole('combobox', { name: 'Assignee' }).selectOption('user2');
      await page.getByRole('button', { name: 'Reassign' }).click();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
      await expect(page.getByText('Task reassigned to user2')).toBeVisible();
      await expect(page.getByText('Assigned to: user2')).toBeVisible();
    });
  });

  test.describe('AI Integration', () => {
    test('should test all AI service connections', async ({ page }) => {
      await page.goto('/ai-settings');
      
      // –¢–µ—Å—Ç OpenRouter –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      await page.getByRole('button', { name: 'Test OpenRouter Connection' }).click();
      await expect(page.getByText('OpenRouter: Connected')).toBeVisible({ timeout: 10000 });
      await expect(page.getByText('OpenRouter: Response Time')).toBeVisible();
      
      // –¢–µ—Å—Ç LM Studio –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      await page.getByRole('button', { name: 'Test LM Studio Connection' }).click();
      await expect(page.getByText('LM Studio: Connected')).toBeVisible({ timeout: 10000 });
      await expect(page.getByText('LM Studio: Response Time')).toBeVisible();
      
      // –¢–µ—Å—Ç xAI –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      await page.getByRole('button', { name: 'Test xAI Connection' }).click();
      await expect(page.getByText('xAI: Connected')).toBeVisible({ timeout: 10000 });
      await expect(page.getByText('xAI: Response Time')).toBeVisible();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
      await expect(page.getByText('All AI Services: Connected')).toBeVisible();
    });

    test('should handle AI service failures gracefully', async ({ page }) => {
      // –ú–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ OpenRouter
      await page.route('**/api/ai/openrouter', async route => {
        await route.fulfill({ status: 500, body: 'OpenRouter Service Unavailable' });
      });

      await page.goto('/ai-settings');
      
      // –¢–µ—Å—Ç —Å –æ—à–∏–±–∫–æ–π
      await page.getByRole('button', { name: 'Test OpenRouter Connection' }).click();
      await expect(page.getByText('OpenRouter: Connection Failed')).toBeVisible();
      await expect(page.getByText('OpenRouter: Service Unavailable')).toBeVisible();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏
      await expect(page.getByText('AI Service Error')).toBeVisible();
      await expect(page.getByText('Please check your configuration')).toBeVisible();
    });

    test('should perform AI analysis with real data', async ({ page }) => {
      await page.goto('/projects');
      await page.getByRole('button', { name: 'New Project' }).click();
      
      // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
      await page.getByLabel('Project Name').fill('AI Analysis Test Project');
      await page.getByLabel('Description').fill('Project for testing AI analysis capabilities');
      await page.getByRole('combobox', { name: 'Priority' }).selectOption('high');
      
      // –ó–∞–ø—É—Å–∫ AI –∞–Ω–∞–ª–∏–∑–∞
      await page.getByRole('button', { name: 'Analyze with AI' }).click();
      
      // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
      await expect(page.getByText('AI Analysis Complete')).toBeVisible({ timeout: 20000 });
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
      await expect(page.getByText('AI Analysis Results')).toBeVisible();
      await expect(page.getByText('Estimated Duration')).toBeVisible();
      await expect(page.getByText('Risk Assessment')).toBeVisible();
      await expect(page.getByText('Resource Requirements')).toBeVisible();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞
      const analysisText = await page.getByText('AI Analysis Results').textContent();
      expect(analysisText).toContain('Analysis');
    });
  });

  test.describe('User Management', () => {
    test('should create user with proper permissions', async ({ page }) => {
      await page.goto('/users');
      await page.getByRole('button', { name: 'New User' }).click();
      
      // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      await page.getByLabel('Username').fill('testuser');
      await page.getByLabel('Email').fill('test@example.com');
      await page.getByLabel('Password').fill('password123');
      await page.getByLabel('Confirm Password').fill('password123');
      await page.getByRole('combobox', { name: 'Role' }).selectOption('user');
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
      await page.getByRole('checkbox', { name: 'Can Create Projects' }).check();
      await page.getByRole('checkbox', { name: 'Can Create Tasks' }).check();
      await page.getByRole('checkbox', { name: 'Can Access AI Features' }).check();
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await page.getByRole('button', { name: 'Save User' }).click();
      await expect(page.getByText('User created successfully')).toBeVisible();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ
      await expect(page.getByText('testuser')).toBeVisible();
      await expect(page.getByText('test@example.com')).toBeVisible();
      await expect(page.getByText('User')).toBeVisible();
    });

    test('should handle user authentication flow', async ({ page }) => {
      // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
      await page.goto('/login');
      
      // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
      await page.getByLabel('Username').fill('testuser');
      await page.getByLabel('Password').fill('password123');
      await page.getByRole('button', { name: 'Login' }).click();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
      await expect(page.getByText('Welcome, testuser')).toBeVisible();
      await expect(page.getByText('Dashboard')).toBeVisible();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      await page.getByRole('link', { name: 'Projects' }).click();
      await expect(page.getByText('Projects')).toBeVisible();
      
      await page.getByRole('link', { name: 'Tasks' }).click();
      await expect(page.getByText('Tasks')).toBeVisible();
      
      // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
      await page.getByRole('button', { name: 'Logout' }).click();
      await expect(page.getByText('Login')).toBeVisible();
    });
  });

  test.describe('Responsive Design', () => {
    test('should work on mobile devices', async ({ page }) => {
      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
      await page.setViewportSize({ width: 375, height: 667 });
      
      await page.goto('/projects');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
      await page.getByRole('button', { name: 'Menu' }).click();
      await expect(page.getByRole('navigation')).toBeVisible();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º
      await page.getByRole('button', { name: 'New Project' }).click();
      await page.getByLabel('Project Name').fill('Mobile Project');
      await page.getByLabel('Description').fill('Project created on mobile');
      await page.getByRole('button', { name: 'Save Project' }).click();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      await expect(page.getByText('Mobile Project')).toBeVisible();
    });

    test('should work on tablet devices', async ({ page }) => {
      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω—à–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
      await page.setViewportSize({ width: 768, height: 1024 });
      
      await page.goto('/tasks');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–∞ –ø–ª–∞–Ω—à–µ—Ç–µ
      await page.getByRole('button', { name: 'New Task' }).click();
      await page.getByLabel('Task Title').fill('Tablet Task');
      await page.getByLabel('Description').fill('Task created on tablet');
      await page.getByRole('button', { name: 'Save Task' }).click();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      await expect(page.getByText('Tablet Task')).toBeVisible();
    });
  });

  test.describe('Accessibility', () => {
    test('should support keyboard navigation', async ({ page }) => {
      await page.goto('/projects');
      
      // –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
      await page.keyboard.press('Tab');
      await page.keyboard.press('Tab');
      await page.keyboard.press('Enter');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ–∫—É—Å–∞ –Ω–∞ –∫–Ω–æ–ø–∫–µ
      await expect(page.getByRole('button', { name: 'New Project' })).toBeFocused();
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
      await page.keyboard.press('Enter');
      await page.getByLabel('Project Name').fill('Keyboard Project');
      await page.keyboard.press('Tab');
      await page.getByLabel('Description').fill('Project created with keyboard');
      await page.keyboard.press('Tab');
      await page.keyboard.press('Enter');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è
      await expect(page.getByText('Keyboard Project')).toBeVisible();
    });

    test('should have proper ARIA attributes', async ({ page }) => {
      await page.goto('/projects');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ ARIA –∞—Ç—Ä–∏–±—É—Ç–æ–≤
      await expect(page.getByRole('button', { name: 'New Project' })).toBeVisible();
      await expect(page.getByRole('heading', { name: 'Projects' })).toBeVisible();
      await expect(page.getByRole('main')).toBeVisible();
      await expect(page.getByRole('navigation')).toBeVisible();
    });
  });

  test.describe('Performance', () => {
    test('should load pages within acceptable time', async ({ page }) => {
      const startTime = Date.now();
      
      await page.goto('/projects');
      await expect(page.getByText('Projects')).toBeVisible();
      
      const loadTime = Date.now() - startTime;
      expect(loadTime).toBeLessThan(3000); // –ú–µ–Ω–µ–µ 3 —Å–µ–∫—É–Ω–¥
    });

    test('should handle large datasets efficiently', async ({ page }) => {
      // –ú–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
      await page.route('**/api/projects', async route => {
        const projects = Array.from({ length: 100 }, (_, i) => ({
          id: i + 1,
          name: `Project ${i + 1}`,
          priority: 'medium',
          status: 'in-progress'
        }));
        await route.fulfill({ json: projects });
      });

      await page.goto('/projects');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
      await expect(page.getByText('Project 1')).toBeVisible();
      await expect(page.getByText('Project 100')).toBeVisible();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const startTime = Date.now();
      await page.getByRole('button', { name: 'Next Page' }).click();
      const navigationTime = Date.now() - startTime;
      expect(navigationTime).toBeLessThan(1000); // –ú–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã
    });
  });
});
