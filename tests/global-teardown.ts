import { chromium, FullConfig } from '@playwright/test';
import { execSync } from 'child_process';

/**
 * üßπ Global Teardown for CRM Tests
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ CRM —Å–∏—Å—Ç–µ–º—ã
 */

async function globalTeardown(config: FullConfig) {
  console.log('üßπ Starting Global Teardown for CRM Tests');
  
  try {
    // 1. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await cleanupTestData();
    
    // 2. –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await cleanupDatabase();
    
    // 3. –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    await cleanupTempFiles();
    
    // 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    await generateFinalReport();
    
    console.log('‚úÖ Global teardown completed successfully');
    
  } catch (error) {
    console.error('‚ùå Global teardown failed:', error);
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ—á–∏—Å—Ç–∫–∞ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞
  }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
async function cleanupTestData() {
  console.log('üóëÔ∏è Cleaning up test data...');
  
  const browser = await chromium.launch();
  const page = await browser.newPage();
  
  try {
    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    await cleanupTestProjects(page);
    
    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á
    await cleanupTestTasks(page);
    
    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await cleanupTestUsers(page);
    
    console.log('‚úÖ Test data cleanup completed');
    
  } catch (error) {
    console.error('‚ùå Test data cleanup failed:', error);
  } finally {
    await browser.close();
  }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
 */
async function cleanupTestProjects(page: any) {
  console.log('üìÅ Cleaning up test projects...');
  
  try {
    await page.goto('/projects');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    const testProjects = await page.locator('[data-testid="project-item"]').all();
    
    for (const project of testProjects) {
      const projectName = await project.textContent();
      
      // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
      if (projectName?.includes('Test Project') || projectName?.includes('AI Integration')) {
        await project.getByRole('button', { name: 'Delete' }).click();
        await page.getByRole('button', { name: 'Confirm Delete' }).click();
        console.log(`   ‚úÖ Deleted project: ${projectName}`);
      }
    }
    
  } catch (error) {
    console.log('   ‚ö†Ô∏è Project cleanup failed:', error.message);
  }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á
 */
async function cleanupTestTasks(page: any) {
  console.log('üìã Cleaning up test tasks...');
  
  try {
    await page.goto('/tasks');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á
    const testTasks = await page.locator('[data-testid="task-item"]').all();
    
    for (const task of testTasks) {
      const taskTitle = await task.textContent();
      
      // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á
      if (taskTitle?.includes('Test Task') || taskTitle?.includes('AI Model')) {
        await task.getByRole('button', { name: 'Delete' }).click();
        await page.getByRole('button', { name: 'Confirm Delete' }).click();
        console.log(`   ‚úÖ Deleted task: ${taskTitle}`);
      }
    }
    
  } catch (error) {
    console.log('   ‚ö†Ô∏è Task cleanup failed:', error.message);
  }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
async function cleanupTestUsers(page: any) {
  console.log('üë• Cleaning up test users...');
  
  try {
    await page.goto('/admin/users');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const testUsers = await page.locator('[data-testid="user-item"]').all();
    
    for (const user of testUsers) {
      const username = await user.textContent();
      
      // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      if (username?.includes('testuser') || username?.includes('guest')) {
        await user.getByRole('button', { name: 'Delete' }).click();
        await page.getByRole('button', { name: 'Confirm Delete' }).click();
        console.log(`   ‚úÖ Deleted user: ${username}`);
      }
    }
    
  } catch (error) {
    console.log('   ‚ö†Ô∏è User cleanup failed:', error.message);
  }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
async function cleanupDatabase() {
  console.log('üóÑÔ∏è Cleaning up database...');
  
  try {
    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
    execSync('npm run db:cleanup', { stdio: 'inherit' });
    
    console.log('‚úÖ Database cleanup completed');
    
  } catch (error) {
    console.log('‚ö†Ô∏è Database cleanup failed:', error.message);
  }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
 */
async function cleanupTempFiles() {
  console.log('üìÅ Cleaning up temporary files...');
  
  try {
    // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ Playwright
    execSync('rm -rf test-results/', { stdio: 'inherit' });
    execSync('rm -rf playwright-report/', { stdio: 'inherit' });
    execSync('rm -rf traces/', { stdio: 'inherit' });
    
    // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ CRM
    execSync('rm -rf temp/', { stdio: 'inherit' });
    execSync('rm -rf uploads/temp/', { stdio: 'inherit' });
    
    console.log('‚úÖ Temporary files cleanup completed');
    
  } catch (error) {
    console.log('‚ö†Ô∏è Temporary files cleanup failed:', error.message);
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
 */
async function generateFinalReport() {
  console.log('üìä Generating final report...');
  
  try {
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    const report = {
      timestamp: new Date().toISOString(),
      testRun: 'CRM Playwright Tests',
      status: 'completed',
      cleanup: {
        testData: 'completed',
        database: 'completed',
        tempFiles: 'completed'
      },
      summary: {
        totalTests: 'See individual test reports',
        passed: 'See individual test reports',
        failed: 'See individual test reports',
        duration: 'See individual test reports'
      }
    };
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    const fs = require('fs');
    const path = require('path');
    const reportPath = path.join(__dirname, '..', 'playwright-cleanup-report.json');
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
    
    console.log(`   üìÑ Cleanup report saved: ${reportPath}`);
    console.log('‚úÖ Final report generated');
    
  } catch (error) {
    console.log('‚ö†Ô∏è Final report generation failed:', error.message);
  }
}

export default globalTeardown;