import { test, expect } from '@playwright/test';

test.describe('Simple CRM Tests', () => {
  test('should load test page', async ({ page }) => {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –ø–∞–º—è—Ç–∏
    await page.setContent(`
      <!DOCTYPE html>
      <html>
        <head>
          <title>CRM Test</title>
          <style>
            body { font-family: Arial, sans-serif; padding: 20px; }
            .container { max-width: 800px; margin: 0 auto; }
            .header { background: #f0f0f0; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
            .content { background: white; padding: 20px; border: 1px solid #ddd; border-radius: 8px; }
            .button { background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; }
            .button:hover { background: #0056b3; }
            .notification { background: #e7f3ff; border: 1px solid #b3d9ff; padding: 10px; margin: 10px 0; border-radius: 4px; }
            .theme-toggle { position: fixed; top: 20px; right: 20px; background: #333; color: white; border: none; padding: 10px; border-radius: 50%; cursor: pointer; }
            .dark { background: #1a1a1a; color: white; }
            .dark .content { background: #2a2a2a; border-color: #444; }
            .dark .header { background: #333; }
          </style>
        </head>
        <body>
          <div class="theme-toggle" onclick="toggleTheme()">üåô</div>
          <div class="container">
            <div class="header">
              <h1>CRM System Test</h1>
              <p>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏</p>
            </div>
            <div class="content">
              <h2>–î–∞—à–±–æ—Ä–¥</h2>
              <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CRM —Å–∏—Å—Ç–µ–º—É!</p>
              <button class="button" onclick="addNotification()">–î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</button>
              <div id="notifications"></div>
            </div>
          </div>
          <script>
            let darkMode = false;
            let notificationCount = 0;
            
            function toggleTheme() {
              darkMode = !darkMode;
              document.body.classList.toggle('dark', darkMode);
              const button = document.querySelector('.theme-toggle');
              button.textContent = darkMode ? '‚òÄÔ∏è' : 'üåô';
            }
            
            function addNotification() {
              notificationCount++;
              const notifications = document.getElementById('notifications');
              const notification = document.createElement('div');
              notification.className = 'notification';
              notification.innerHTML = \`
                <strong>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ \${notificationCount}</strong><br>
                –ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ \${new Date().toLocaleTimeString()}
                <button onclick="markAsRead(this)" style="float: right; background: #28a745; color: white; border: none; padding: 5px 10px; border-radius: 3px; cursor: pointer;">–ü—Ä–æ—á–∏—Ç–∞–Ω–æ</button>
              \`;
              notifications.appendChild(notification);
            }
            
            function markAsRead(button) {
              button.parentElement.style.opacity = '0.5';
              button.textContent = '‚úì –ü—Ä–æ—á–∏—Ç–∞–Ω–æ';
              button.disabled = true;
            }
          </script>
        </body>
      </html>
    `);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
    await expect(page.locator('h1')).toHaveText('CRM System Test');
    await expect(page.locator('.content')).toBeVisible();
  });

  test('should test theme toggle functionality', async ({ page }) => {
    await page.setContent(`
      <!DOCTYPE html>
      <html>
        <head>
          <title>Theme Test</title>
          <style>
            body { font-family: Arial, sans-serif; padding: 20px; transition: all 0.3s; }
            .theme-toggle { background: #333; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer; }
            .dark { background: #1a1a1a; color: white; }
            .dark .theme-toggle { background: #555; }
          </style>
        </head>
        <body>
          <button class="theme-toggle" onclick="toggleTheme()">üåô –¢—ë–º–Ω–∞—è —Ç–µ–º–∞</button>
          <h1>–¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã</h1>
          <p>–≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –º–µ–Ω—è—Ç—å —Ü–≤–µ—Ç –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ç–µ–º—ã.</p>
          <script>
            let darkMode = false;
            function toggleTheme() {
              darkMode = !darkMode;
              document.body.classList.toggle('dark', darkMode);
              const button = document.querySelector('.theme-toggle');
              button.textContent = darkMode ? '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞' : 'üåô –¢—ë–º–Ω–∞—è —Ç–µ–º–∞';
            }
          </script>
        </body>
      </html>
    `);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await expect(page.locator('.theme-toggle')).toHaveText('üåô –¢—ë–º–Ω–∞—è —Ç–µ–º–∞');
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–º—É
    await page.click('.theme-toggle');
    await expect(page.locator('.theme-toggle')).toHaveText('‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞—Å—Å dark –¥–æ–±–∞–≤–ª–µ–Ω
    await expect(page.locator('body')).toHaveClass(/dark/);
  });

  test('should test notification functionality', async ({ page }) => {
    await page.setContent(`
      <!DOCTYPE html>
      <html>
        <head>
          <title>Notification Test</title>
          <style>
            body { font-family: Arial, sans-serif; padding: 20px; }
            .button { background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; margin: 10px; }
            .notification { background: #e7f3ff; border: 1px solid #b3d9ff; padding: 10px; margin: 10px 0; border-radius: 4px; }
            .notification.read { opacity: 0.5; }
            .mark-read { background: #28a745; color: white; border: none; padding: 5px 10px; border-radius: 3px; cursor: pointer; }
          </style>
        </head>
        <body>
          <h1>–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h1>
          <button class="button" onclick="addNotification()">–î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</button>
          <button class="button" onclick="markAllRead()">–û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ</button>
          <div id="notifications"></div>
          <div id="counter">–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: 0</div>
          
          <script>
            let notifications = [];
            
            function addNotification() {
              const id = Date.now();
              const notification = {
                id: id,
                title: '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
                message: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #' + (notifications.length + 1),
                read: false,
                time: new Date().toLocaleTimeString()
              };
              notifications.push(notification);
              renderNotifications();
            }
            
            function markAsRead(id) {
              const notification = notifications.find(n => n.id === id);
              if (notification) {
                notification.read = true;
                renderNotifications();
              }
            }
            
            function markAllRead() {
              notifications.forEach(n => n.read = true);
              renderNotifications();
            }
            
            function renderNotifications() {
              const container = document.getElementById('notifications');
              const counter = document.getElementById('counter');
              const unreadCount = notifications.filter(n => !n.read).length;
              
              counter.textContent = '–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: ' + unreadCount;
              
              container.innerHTML = notifications.map(n => \`
                <div class="notification \${n.read ? 'read' : ''}" data-id="\${n.id}">
                  <strong>\${n.title}</strong><br>
                  \${n.message}<br>
                  <small>–í—Ä–µ–º—è: \${n.time}</small>
                  \${!n.read ? '<button class="mark-read" onclick="markAsRead(' + n.id + ')">–ü—Ä–æ—á–∏—Ç–∞–Ω–æ</button>' : '<span>‚úì –ü—Ä–æ—á–∏—Ç–∞–Ω–æ</span>'}
                </div>
              \`).join('');
            }
          </script>
        </body>
      </html>
    `);

    // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await page.click('text=–î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
    await page.click('text=–î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
    await page.click('text=–î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç—á–∏–∫
    await expect(page.locator('#counter')).toHaveText('–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: 3');
    
    // –û—Ç–º–µ—á–∞–µ–º –æ–¥–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
    await page.click('.mark-read');
    await expect(page.locator('#counter')).toHaveText('–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: 2');
    
    // –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    await page.click('text=–û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ');
    await expect(page.locator('#counter')).toHaveText('–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: 0');
  });

  test('should test responsive design', async ({ page }) => {
    await page.setContent(`
      <!DOCTYPE html>
      <html>
        <head>
          <title>Responsive Test</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }
            .container { max-width: 1200px; margin: 0 auto; }
            .header { background: #f0f0f0; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
            .content { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; }
            .card { background: white; padding: 20px; border: 1px solid #ddd; border-radius: 8px; }
            
            @media (max-width: 768px) {
              .content { grid-template-columns: 1fr; }
              .header { padding: 15px; }
              .card { padding: 15px; }
            }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <h1>–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω</h1>
              <p>–≠—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞</p>
            </div>
            <div class="content">
              <div class="card">
                <h3>–ö–∞—Ä—Ç–æ—á–∫–∞ 1</h3>
                <p>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏</p>
              </div>
              <div class="card">
                <h3>–ö–∞—Ä—Ç–æ—á–∫–∞ 2</h3>
                <p>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Ç–æ—Ä–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏</p>
              </div>
            </div>
          </div>
        </body>
      </html>
    `);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ—Å–∫—Ç–æ–ø–Ω—ã–π –≤–∏–¥
    await page.setViewportSize({ width: 1200, height: 800 });
    await expect(page.locator('.content')).toBeVisible();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–±–∏–ª—å–Ω—ã–π –≤–∏–¥
    await page.setViewportSize({ width: 375, height: 667 });
    await expect(page.locator('.content')).toBeVisible();
    await expect(page.locator('.card')).toHaveCount(2);
  });
});
