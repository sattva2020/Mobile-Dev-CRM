#!/usr/bin/env node

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ OpenRouter
 */

const axios = require('axios');

const OPENROUTER_API_KEY = process.env.REACT_APP_OPENROUTER_API_KEY || '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';

async function checkModels() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...');
    
    const response = await axios.get('https://openrouter.ai/api/v1/models', {
      headers: {
        'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:');
    console.log('=' .repeat(50));
    
    const models = response.data.data;
    const grokModels = models.filter(model => 
      model.id.includes('grok') || 
      model.id.includes('x-ai') ||
      model.name?.toLowerCase().includes('grok')
    );
    
    console.log('ü§ñ Grok –º–æ–¥–µ–ª–∏:');
    grokModels.forEach(model => {
      console.log(`- ${model.id}`);
      console.log(`  –ù–∞–∑–≤–∞–Ω–∏–µ: ${model.name}`);
      console.log(`  –ö–æ–Ω—Ç–µ–∫—Å—Ç: ${model.context_length}`);
      console.log(`  –ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${model.provider}`);
      console.log(`  –¶–µ–Ω–∞: ${model.pricing?.prompt || 'N/A'}`);
      console.log('');
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
    const targetModel = 'x-ai/grok-4-fast:free';
    const isAvailable = models.some(model => model.id === targetModel);
    
    console.log(`üéØ –ú–æ–¥–µ–ª—å ${targetModel}: ${isAvailable ? '‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}`);
    
    if (!isAvailable) {
      console.log('\nüí° –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏:');
      const alternatives = models.filter(model => 
        model.id.includes('grok') || 
        model.id.includes('x-ai') ||
        (model.pricing?.prompt === '0' && model.pricing?.completion === '0')
      );
      
      alternatives.forEach(model => {
        console.log(`- ${model.id} (${model.name})`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–æ–¥–µ–ª–µ–π:', error.response?.data || error.message);
  }
}

checkModels();
